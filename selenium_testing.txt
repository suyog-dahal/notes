%#Selenium:

It is a portable framework for testing web applications. Selenium provides a playback tool for authoring functional tests without the need to learn a new test scripting language.

4 components of selenium since selenium core could not suffice all the use cases of testing hence requires its components.
1. Selenium RC
-> Selenium core had a disadvantages of only being capable of testing the webapp in the local system so due to this selenium RC acted as a proxy server (i.e it takes the website and makes it look like website is located in the local system to the selenium core). Together with the selenium core it was known as Selenium 1.

2. Selenium IDE
-> to decrease the time of testing

3. selenium grid:
-> it could help test multiple part of site in multiple system. It enables parallel testing of applications on multiple machines.

4. Selenium webdriver:
-> Selenium webdriver was the first cross platform testing framework that could control the browser from the OS level.It controls the browser by directly communicates with the browser.

selenium 2 and selenium3(new and improved) is the combination of selenium rc and webdriver.

Setting up Selenium with Maven: JAVA(JDK, eclipse EE version)

# Flow of creating an automated test:
1-> find the element on the web browser on which it has to perform an operation
2-> Perform an action on the found element(s)
3-> Test and create a test report with the results.
eg:

1->The elements can be found by its properties or selectors such as id,Name,ClassName,TagName, Link Text, xpath(needs extension such as chropath which is for chrome) etc.
   |-> WebElement button = driver.findElement(By.class("classname")); 
2->Performing an action examples:
 \-> click(): Used to click on the link and wait for page load to complete before proceeding to next command,
     sendKeys(): Used to enter the values onto the text boxes,
     Clear(): Used to clear text boxes of its current value,
     Submit(): Webdriver will automatically trigger the submit function of the form where the element belongs to

 WebElement button =driver.findElement(By.class("classname")).click();
3-> If you to test whether the output is right or wrong you use TestNG: TestNG is an open source automatedd testing framework, where NG means "Next Generation". It is a testing framework inspired from JUnit and NUnit, but introducing some new functionalities makes it more powerful and easier to use.

#Features of TestNG:
-> TestNG annotations are easy to create test cases.eg @Test
-> Test cases can be grouped and prioritized more easily.
-> It supports data-driven testing using DataProviders and generates HTML reports.
-> Parallel test execution is possible.

for testng annotations to work you must import org.testng.annotations.*;

#Annotations in TestNG
Some are:
@BeforeSuite: the annotated method will be run only once before all tests in this suite have run.
@BeforeTest: The annotated method will be run before any test method belonging to the classes inside the <test> tag is run. Example you might require to open the browser before the test should run etc.
@BeforeClass: The annotated method will be run only once before the first test method in the current class in invoked.
@BeforeMethod: it runs before every methods that is annotated as @test so if there are 5 methods than the before method annotated function will run for five times and @Test annotation is annotated before every testing methods(functions).

# example

//import all required packages

public class app{
	//Initialize the object of webdriver package
		Webdriver driver;

	public void test(){

	// Set system property to the path of the chromedriver.exe that is used to open chrome
		System.setProperty("webdriver.chrome.driver","path to chrome.exe");
	//initialize the object of the chromedriver	
		driver = new Chromedriver();
	//set the name of the site to which you want to run test cases against
		driver.get("https://www.google.com")
	//set of instruction to test cases
		driver.findElement(By.class("classname")).actions();{such as click();}
	//you can also use test driven method here
		String actualTitle = "This is a test";
		String ActualValue = driver.findElement(By.Class(classname));
		Assert.assertEquals(ActualValue, actualTitle);

	}
}

# Running a Headless Test in Selenium
It is usable in the system where you cannot open the browsers such as in a commandline operating system. The test is being carried out in the background without opening a browser.

syntax of headless mode 
ChromeOptions options = new ChromeOptions();
options.addArguments("headless");
driver = new ChromeDriver(options);
